Exercise 2.33
(define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) 
              nil sequence))

(define (append seq1 seq2)
  (accumulate cons seq2 seq1))

(define (length sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))

Exercise 2.34
(define
  (horner-eval x coefficient-sequence)
  (accumulate
    (lambda (this-coeff higher-terms)
      (+ this-coeff (* x higher-terms)))
    0
    coefficient-sequence))

Exercise 2.35
(define (count-leaves t)
  (accumulate + 0 (map (lambda (x) (if (pair? x) (count-leaves x) 1)) t)))

Exercise 2.36
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))

Exercise 2.37
(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(define (matrix-*-vector m v)
  (map (lambda (row) (dot-product row v)) m))

(define (transpose mat)
  (accumulate-n cons nil mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map dot-product cols m)))

Exercise 2.38
(fold-right / 1 (list 1 2 3))
= (1 / (2 / (3 / 1)))
3/2
(fold-left  / 1 (list 1 2 3))
= (((1 / 1) / 2) / 3)
1/6
(fold-right list nil (list 1 2 3))
(1 (2 (3 ())))
(fold-left  list nil (list 1 2 3))
(((() 1) 2) 3)

Guarantee of fold-right and fold-left will produce same values
Associativity does it sometimes.
If you have an identity and the null value you give is that identity, then
you're good. But you could also have base-value be some other bullshit,
and then you'd need commutativity after all.
The word we want is probably "monoid"

Exercise 2.39
(define (reverse sequence)
  (fold-right
    (lambda (x y) (append y (list x))) nil sequence))

(define (reverse sequence)
  (fold-left
    (lambda (x y) (cons y x)) nil sequence))

Exercise 2.40
First, let's use this function defined a while above:
(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low 
            (enumerate-interval 
             (+ low 1) 
             high))))

Next we can directly copy the code from this section:
(define (unique-pairs n)
    (map (lambda (i)
           (map (lambda (j) 
                  (list i j))
                (enumerate-interval 1 (- i 1))))
         (enumerate-interval 1 n)))

But there's a layer of nesting here that we don't need. So let's get rid of it.
Imitating the flatmap procedure given above:

(define (unique-pairs n)
  (accumulate append nil
    (map (lambda (i)
           (map (lambda (j) 
                  (list i j))
                (enumerate-interval 1 (- i 1))))
         (enumerate-interval 1 n))))

And done.
Using the same definitions of make-pair-sum and prime-sum? above:

(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter 
        prime-sum?
        (unique-pairs n))))

Exercise 2.41

(define (unique-triples n)
 (accumulate append nil
  (accumulate append nil
    (map (lambda (i)
      (map (lambda (j)
        (map (lambda (k)
               (list i j k))
             (enumerate-interval 1 (- j 1))))
        (enumerate-interval 1 (- i 1))))
      (enumerate-interval 1 n)))))

(define (sum-to n s)
  (define (sum l) (accumulate + 0 l))
  (filter (lambda (triple) (= s (sum triple))) (unique-triples n)))

Ugh, not elegant.
Should have written this with flatmap

Exercise 2.42

(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) 
           (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position 
                    new-row 
                    k 
                    rest-of-queens))
                 (enumerate-interval 
                  1 
                  board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))

How come this function is called new-row when it's the new column actually?

Okay now. Representation: a list. Each element of the list is the index.
And we'll say that the kth row is the rightmost, and add rows on by cons-ing
them. On the right.

oxxxx
xxoxx
xxxxo
xoxxx
xxxox

this is 1 4 2 5 3. Going by column, 1th index, 4rd, etc.

(define empty-board nil)

(define (safe? k positions)
  (define (contains l n)
    (accumulate (lambda (x y) (or (= n x) y)) false l))
  (define (bin-or x y) (or x y))
  (define (danger-spots cand) (map (lambda (x) (list cand (+ cand x) (- cand x)))
                                (enumerate-interval 1 (- k 1))))
  (not (accumulate bin-or false (map contains (danger-spots (car positions))
                                              (cdr positions)))))

(define (adjoin-position new-row k rest-of-queens) (cons new-row rest-of-queens))

I checked a few chessboards randomly for n=4,5,6 and all worked
I'm not gonna do the rest lol
I also am not sure if this is exhaustive.

Exercise 2.43
The way Louis does it, queen-cols get called 8 times per recursive depth.
For eight queens, the correct program goes straight down, while Louis's
program branches out recursively. It should take 8^8 times as long.
Or maybe 8^7 times as long. No, definitely 8^8.
8x (queen-cols 7) -> 64x (queen-cols 6) -> ... -> 8^8 (queen-cols 0)

