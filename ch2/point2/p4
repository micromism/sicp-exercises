Okay so now we're working with a picture language or something
Sadly I can't run it out of the base mit-scheme installation
So I won't be testing any of these.

Exercise 2.44
(define (right-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (right-split painter 
                                  (- n 1))))
        (beside painter 
                (below smaller smaller)))))

A simple text replace afterwards:

(define (up-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (up-split painter 
                                  (- n 1))))
        (below painter 
                (beside smaller smaller)))))

Exercise 2.45
(define (split first second)
  (lambda (painter n)
    (if (= n 0)
        painter
        (let ((smaller ((split first second) painter (- n 1))))
          (first painter (second smaller smaller))))))

Exercise 2.46
(define make-vect cons)
(define xcor-vect car)
(define ycor-vect cdr)

(define (add-vect v w) (make-vect
                            (+ (xcor-vect v) (xcor-vect w))
                            (+ (ycor-vect v) (ycor-vect w))))

(define (sub-vect v w) (make-vect
                            (- (xcor-vect v) (xcor-vect w))
                            (- (ycor-vect v) (ycor-vect w))))

(define (scale-vect s v) (make-vect
                            (* s (xcor-vect v))
                            (* s (ycor-vect v))))

Exercise 2.47
(define origin-frame car)
(define edge1-frame cadr)
(define edge2-frame caddr)

Exercise 2.48
(define make-segment cons)
(define start-segment car)
(define end-segment cdr)

Exercise 2.49
1.
(define br (make-vect 0 0))
(define tr (make-vect 0 1))
(define tl (make-vect 1 1))
(define bl (make-vect 1 0))

(define r (make-segment br tr))
(define t (make-segment tr tl))
(define l (make-segment tl bl))
(define b (make-segment bl br))

(segments->painter (list r t l b))

2.

(define slash (make-segment br tl))
(define bslash (make-segment tl br))

(segments->painter (list slash bslash))

3.
(define mp1 (make-vect 0 0.5))
(define mp2 (make-vect 0.5 0))
(define mp3 (make-vect 0.5 1))
(define mp4 (make-vect 1 0.5))

(define bl (make-segment mp1 mp2))
(define tr (make-segment mp3 mp4))
(define tl (make-segment mp1 mp3))
(define br (make-segment mp4 mp2))

(segments->painter (list bl tr tl br))

4.
lmao no

Exercise 2.50
(define (flip-vert painter)
  (transform-painter 
   painter
   (make-vect 0.0 1.0)   ; new origin
   (make-vect 1.0 1.0)   ; new end of edge1
   (make-vect 0.0 0.0))) ; new end of edge2

Taking given flip-vert definition,
we make the appropriate substitutions.

(define (flip-horiz painter)
  (transform-painter 
   painter
   (make-vect 1.0 0.0)
   (make-vect 0.0 0.0)
   (make-vect 1.0 1.0)))

180 degrees:

(define (rotate180 painter) (rotate90 (rotate90 painter)))

270 degrees:

(define (rotate270 painter) (rotate90 (rotate180 painter)))

Exercise 2.51
(define (beside painter1 painter2)
  (let ((split-point (make-vect 0.5 0.0)))
    (let ((paint-left  (transform-painter 
                        painter1
                        (make-vect 0.0 0.0)
                        split-point
                        (make-vect 0.0 1.0)))
          (paint-right (transform-painter
                        painter2
                        split-point
                        (make-vect 1.0 0.0)
                        (make-vect 0.5 1.0))))
      (lambda (frame)
        (paint-left frame)
        (paint-right frame)))))

Making the appropriate substitutions:
(define (below painter1 painter2)
  (let ((split-point (make-vect 0.0 0.5)))
    (let ((paint-bottom  (transform-painter 
                        painter1
                        (make-vect 0.0 0.0)
                        (make-vect 1.0 0.0)))
                        split-point
          (paint-top (transform-painter
                        painter2
                        split-point
                        (make-vect 1.0 0.5)
                        (make-vect 0.0 1.0))))
      (lambda (frame)
        (paint-bottom frame)
        (paint-top frame)))))

Using rotates and beside:
(define (below painter1 painter2)
  (rotate90 (beside (rotate270 painter1) (rotate270 painter2))))

Hmm, I'm not 100% sure if that code puts painter1 above or below painter2.

Exercise 2.52
1. I'm not doing that. It's definitely beneath me.
2. 
(define (corner-split painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
            (right (right-split painter 
                                (- n 1))))
        (let ((top-left up)
              (bottom-right right)
              (corner (corner-split painter 
                                    (- n 1))))
          (beside (below painter top-left)
                  (below bottom-right 
                         corner))))))

3.
(define (square-limit painter n)
  (let ((combine4 
         (square-of-four identity
                         identity
                         identity 
                         identity
    (combine4 (corner-split painter n))))
