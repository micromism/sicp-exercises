Exercise 1.1

10
10

(+ 5 3 4)
12

(- 9 1)
8

(/ 6 2)
3

(+ (* 2 4) (- 4 6))
6

(define a 3)
a

(define b (+ a 1))
b

(if (and (> b a) (< b (* a b)))
    b
    a)
first, the predicate:
(> b a) true, (< b (* a b)) becomes (< 4 12), also true.
so the entire predicate is true.
Then b gets picked, so
4

(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
(= a 4) false
(= b 4) true, so eval (+ 6 7 a) becomes 16

(+ 2 (if (> b a) b a))
(> b a), so b. then (+ 2 4) =
6

(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
(< a b) is true
so becomes (* b (+ a 1))
for
16


Exercise 1.2

(/ (+ 5
      4
      (- 2
         (- 3
            (+ 6
               (/ 4 5)))))
   (* 3
      (- 6 2)
      (- 2 7)))

Exercise 1.3

(define (sos x y) (+ (* x x) (* y y)))
(define (max2sos x y z) (cond ((and (< x y) (< x z)) (sos y z))
                           ((and (< y x) (< y z)) (sos x z))
                           (else (sos x y))))

Exercise 1.4
Well, it's in the name of the function
lmao
picks between adding or subtracting b, so that we get a + |b| in the end.

Exercise 1.5
(test 0 (p))

Applicative order: evalutes operands (arguments?) first. Loops.
Normal order: evaluates the operator.
Once it becomes an if statement, then the predicate gets evaluated,
then 0 is output.

Exercise 1.6

new-if fails:
if forces evaluation of predicate. new-if expands everything.
sqrt-iter in the second part of the if gets expanded infinitely.
recursion depth exceeded.

Exercise 1.7
For, say, numbers smaller than our test 0.001:
We end up with (square guess) itself being less than the test.
So it doesn't get captured.

For very large floats:
the exponent is big, so it might not actually be possible to represent a float
only 0.001 away. It might end up in an infinite loop, where the guess can't
be improved because it can't actually get more precise.
by the wonders of tail recursion, recursion depth does not! get exceeded.

When the change is a very small fraction of the guess:
actually, at some point the change will be 0, right?
because of limited floating point precision.

(define (sqrt-iter guess x)
	(define next (improve guess x))
	(if (= next guess)
	    guess
	    (sqrt-iter next x)))

Exercise 1.8

(define (cbrt-iter guess x)
  (define next (improve guess x))
  (if (= next guess)
      guess
      (cbrt-iter next x)))

(define (improve guess x)
    (/ (+ (/ x (* y y)) (+ y y)) 3))

(define (cbrt x) (cbrt-iter 1.0 x))


