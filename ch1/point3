Exercise 1.29
(define (1co f a b)
    (+ (f a) (f b)))

(define (simpson f a b n)
    (define h (/ (- b a) n))
    (define (nextterm x) (+ x h h))
    (define (simppart a b) (sum f a nextterm b))
    (* (/ h 3.)
       (+ (* 4 (simppart (+ a h) (- b h)))
          (* 2 (simppart (+ a h h) (- b h h)))
          (1co f a b))))

(simpson cube 0 1 100) -> 0.25
(simpson cube 0 1 1000) -> 0.25


Exercise 1.30
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ (term a) result))))
  (iter a 0))

Exercise 1.31
1.

copy and paste in sum, then replace:
(1) sum -> product
(2) + -> *
(3) 0 -> 1
that's it

(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b))))

(define (factorial n) (product identity 1 inc n))

(define (pi-prod a b)
    (define (pi-numf x) (+ 2 (- x (remainder x 2))))
    (define (pi-denf x) (+ 1 (+ x (remainder x 2))))
    (define (pi-term x) (/ (pi-numf x) (pi-denf x)))
    (* 4. (product pi-term a inc b)))

2.

now copy the other definition of sum we had, and make the same substitutions.

(define (product' term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result))))
  (iter a 1))

Exercise 1.32
1.
Note which things we changed to turn sum into product:
name1 -> name2
+ -> *
0 -> 1

So we can define accumulate by substituting
sum -> accumulate
+ -> combiner
0 -> null-value

(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
         (accumulate combiner null-value term (next a) next b))))

(define (sum term a next b) (accumulate + 0 term a next b))
(define (product term a next b) (accumulate * 1 term a next b))

2.
(define (accumulate' combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner (term a) result))))
  (iter a null-value))

Exercise 1.33
(define (filtered-accumulate filter combiner null-value term a next b)
    (define (filterm a) (if (filter a) (term a) null-value))
    (accumulate combiner null-value filterm a next b))

(define (primesquares a b)
    (define (addsq a b) (+ (square a) b))
    (filtered-accumulate prime? 0 addsq a inc b))

(define (rpprod n)
    (define (filt k) (= 1 (gcd n k)))
    (filtered-accumulate filt * 1 identity 1 inc n))

Exercise 1.34
(f f)
first the arguments are evaluated. but since the second f isn't being applied
with the parentheses, f gets passed as a value to the first f.
Then, we get
(f 2)
This becomes
(2 2)
But 2 isn't a function. so the interpreter stops here.

Exercise 1.35
suppose x = 1 + (1/x)
We can rewrite as x^2 - x - 1 = 0
I'm not gonna actually do it,
but if you apply the quadratic formula here you probably get phi

running (fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)
we get 1.618

Exercise 1.36

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 
       tolerance))
  (define (try guess)
    (display guess)
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(fixed-point (lambda x (/ (log 1000) (log x))) 2)
2.0
9.965784284662087
3.004472209841214
6.279195757507157
3.759850702401539
5.215843784925895
4.182207192401397
4.8277650983445906
4.387593384662677
4.671250085763899
4.481403616895052
4.6053657460929
4.5230849678718865
4.577114682047341
4.541382480151454
4.564903245230833
4.549372679303342
4.559606491913287
4.552853875788271
4.557305529748263
4.554369064436181
4.556305311532999
4.555028263573554
4.555870396702851
4.555315001192079
4.5556812635433275
4.555439715736846
4.555599009998291
4.555493957531389
4.555563237292884
4.555517548417651
4.555547679306398
4.555527808516254
4.555540912917957
;Value: 4.555532270803653

33 steps.

(fixed-point (lambda (x) (/ (+ x (/ (log 1000) (log x))) 2)) 2.)
2.
5.9828921423310435
4.922168721308343
4.628224318195455
4.568346513136242
4.5577305909237005
4.555909809045131
4.555599411610624
4.5555465521473675
;Value: 4.555537551999825

9 steps.

Exercise 1.37
1.
(define 
(define (cont-frac n d k)
    (define (rev f max m) (f (+ 1 (- max m))))
    (define (nn m) (rev n k m))
    (define (dd m) (rev d k m))
    (define (frac-cont k 
        
    )

running cont-frac the way they tell you to, I got k=10 was necessary
for 4 decimal digits.

2.
